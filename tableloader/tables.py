# -*- coding: utf-8 -*-
# File autogenerated by SQLAutoCode
# see http://code.google.com/p/sqlautocode/

import sqlalchemy as sa


def metadataCreator(schema):

    metadata = sa.MetaData(schema=schema)

    agtAgentTypes = sa.Table('agtAgentTypes', metadata,
                             sa.Column('agentTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('agentType', sa.VARCHAR(length=50)),
                             schema=schema
                             )

    agtAgents = sa.Table('agtAgents', metadata,
                         sa.Column('agentID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                         sa.Column('divisionID', sa.INTEGER()),
                         sa.Column('corporationID', sa.INTEGER(), index=True),
                         sa.Column('locationID', sa.INTEGER(), index=True),
                         sa.Column('level', sa.INTEGER()),
                         sa.Column('quality', sa.INTEGER()),
                         sa.Column('agentTypeID', sa.INTEGER()),
                         sa.Column('isLocator', sa.Boolean(name='aa_isloc')),
                         schema=schema
                         )

    agtAgentsInSpace = sa.Table('agtAgentsInSpace', metadata,
                                sa.Column('agentID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('dungeonID', sa.INTEGER()),
                                sa.Column('solarSystemID', sa.INTEGER(), index=True),
                                sa.Column('spawnPointID', sa.INTEGER()),
                                sa.Column('typeID', sa.INTEGER()),
                                schema=schema
                                )

    agtResearchAgents = sa.Table('agtResearchAgents', metadata,
                                 sa.Column('agentID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False, index=True),
                                 schema=schema
                                 )

    certCerts = sa.Table('certCerts', metadata,
                         sa.Column('certID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                         sa.Column('description', sa.UnicodeText()),
                         sa.Column('groupID', sa.INTEGER()),
                         sa.Column('name', sa.VARCHAR(length=255)),
                         schema=schema
                         )

    certMasteries = sa.Table('certMasteries', metadata,
                             sa.Column('typeID', sa.INTEGER()),
                             sa.Column('masteryLevel', sa.INTEGER()),
                             sa.Column('certID', sa.INTEGER()),
                             schema=schema
                             )

    certSkills = sa.Table('certSkills', metadata,
                          sa.Column('certID', sa.INTEGER()),
                          sa.Column('skillID', sa.INTEGER(), index=True),
                          sa.Column('certLevelInt', sa.INTEGER()),
                          sa.Column('skillLevel', sa.INTEGER()),
                          sa.Column('certLevelText', sa.VARCHAR(length=8)),
                          schema=schema
                          )

    chrAncestries = sa.Table('chrAncestries', metadata,
                             sa.Column('ancestryID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('ancestryName', sa.VARCHAR(length=100)),
                             sa.Column('bloodlineID', sa.INTEGER()),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             sa.Column('perception', sa.INTEGER()),
                             sa.Column('willpower', sa.INTEGER()),
                             sa.Column('charisma', sa.INTEGER()),
                             sa.Column('memory', sa.INTEGER()),
                             sa.Column('intelligence', sa.INTEGER()),
                             sa.Column('iconID', sa.INTEGER()),
                             sa.Column('shortDescription', sa.VARCHAR(length=500)),
                             schema=schema
                             )

    chrAttributes = sa.Table('chrAttributes', metadata,
                             sa.Column('attributeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('attributeName', sa.VARCHAR(length=100)),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             sa.Column('iconID', sa.INTEGER()),
                             sa.Column('shortDescription', sa.VARCHAR(length=500)),
                             sa.Column('notes', sa.VARCHAR(length=500)),
                             schema=schema
                             )

    chrBloodlines = sa.Table('chrBloodlines', metadata,
                             sa.Column('bloodlineID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('bloodlineName', sa.VARCHAR(length=100)),
                             sa.Column('raceID', sa.INTEGER()),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             sa.Column('maleDescription', sa.VARCHAR(length=1000)),
                             sa.Column('femaleDescription', sa.VARCHAR(length=1000)),
                             sa.Column('shipTypeID', sa.INTEGER()),
                             sa.Column('corporationID', sa.INTEGER()),
                             sa.Column('perception', sa.INTEGER()),
                             sa.Column('willpower', sa.INTEGER()),
                             sa.Column('charisma', sa.INTEGER()),
                             sa.Column('memory', sa.INTEGER()),
                             sa.Column('intelligence', sa.INTEGER()),
                             sa.Column('iconID', sa.INTEGER()),
                             sa.Column('shortDescription', sa.VARCHAR(length=500)),
                             sa.Column('shortMaleDescription', sa.VARCHAR(length=500)),
                             sa.Column('shortFemaleDescription', sa.VARCHAR(length=500)),
                             schema=schema
                             )

    chrFactions = sa.Table('chrFactions', metadata,
                           sa.Column('factionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                           sa.Column('factionName', sa.VARCHAR(length=100)),
                           sa.Column('description', sa.VARCHAR(length=1000)),
                           sa.Column('raceIDs', sa.INTEGER()),
                           sa.Column('solarSystemID', sa.INTEGER()),
                           sa.Column('corporationID', sa.INTEGER()),
                           sa.Column('sizeFactor', sa.FLOAT()),
                           sa.Column('stationCount', sa.INTEGER()),
                           sa.Column('stationSystemCount', sa.INTEGER()),
                           sa.Column('militiaCorporationID', sa.INTEGER()),
                           sa.Column('iconID', sa.INTEGER()),
                           schema=schema
                           )

    chrRaces = sa.Table('chrRaces', metadata,
                        sa.Column('raceID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('raceName', sa.VARCHAR(length=100)),
                        sa.Column('description', sa.VARCHAR(length=1000)),
                        sa.Column('iconID', sa.INTEGER()),
                        sa.Column('shortDescription', sa.VARCHAR(length=500)),
                        schema=schema
                        )

    crpActivities = sa.Table('crpActivities', metadata,
                             sa.Column('activityID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('activityName', sa.VARCHAR(length=100)),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             schema=schema
                             )

    crpNPCCorporationDivisions = sa.Table('crpNPCCorporationDivisions', metadata,
                                          sa.Column('corporationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                          sa.Column('divisionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                          sa.Column('size', sa.INTEGER()),
                                          schema=schema
                                          )

    crpNPCCorporationResearchFields = sa.Table('crpNPCCorporationResearchFields', metadata,
                                               sa.Column('skillID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                               sa.Column('corporationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                               schema=schema
                                               )

    crpNPCCorporationTrades = sa.Table('crpNPCCorporationTrades', metadata,
                                       sa.Column('corporationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       schema=schema
                                       )

    crpNPCCorporations = sa.Table('crpNPCCorporations', metadata,
                                  sa.Column('corporationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                  sa.Column('size', sa.CHAR(length=1)),
                                  sa.Column('extent', sa.CHAR(length=1)),
                                  sa.Column('solarSystemID', sa.INTEGER()),
                                  sa.Column('investorID1', sa.INTEGER()),
                                  sa.Column('investorShares1', sa.INTEGER()),
                                  sa.Column('investorID2', sa.INTEGER()),
                                  sa.Column('investorShares2', sa.INTEGER()),
                                  sa.Column('investorID3', sa.INTEGER()),
                                  sa.Column('investorShares3', sa.INTEGER()),
                                  sa.Column('investorID4', sa.INTEGER()),
                                  sa.Column('investorShares4', sa.INTEGER()),
                                  sa.Column('friendID', sa.INTEGER()),
                                  sa.Column('enemyID', sa.INTEGER()),
                                  sa.Column('publicShares', sa.INTEGER()),
                                  sa.Column('initialPrice', sa.INTEGER()),
                                  sa.Column('minSecurity', sa.FLOAT()),
                                  sa.Column('scattered', sa.Boolean(name='cnpcc_scatt')),
                                  sa.Column('fringe', sa.INTEGER()),
                                  sa.Column('corridor', sa.INTEGER()),
                                  sa.Column('hub', sa.INTEGER()),
                                  sa.Column('border', sa.INTEGER()),
                                  sa.Column('factionID', sa.INTEGER()),
                                  sa.Column('sizeFactor', sa.FLOAT()),
                                  sa.Column('stationCount', sa.INTEGER()),
                                  sa.Column('stationSystemCount', sa.INTEGER()),
                                  sa.Column('description', sa.VARCHAR(length=4000)),
                                  sa.Column('iconID', sa.INTEGER()),
                                  schema=schema
                                  )

    crpNPCDivisions = sa.Table('crpNPCDivisions', metadata,
                               sa.Column('divisionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('divisionName', sa.VARCHAR(length=100)),
                               sa.Column('description', sa.VARCHAR(length=1000)),
                               sa.Column('leaderType', sa.VARCHAR(length=100)),
                               schema=schema
                               )

    dgmAttributeCategories = sa.Table('dgmAttributeCategories', metadata,
                                      sa.Column('categoryID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                      sa.Column('categoryName', sa.VARCHAR(length=50)),
                                      sa.Column('categoryDescription', sa.VARCHAR(length=200)),
                                      schema=schema
                                      )

    dgmAttributeTypes = sa.Table('dgmAttributeTypes', metadata,
                                 sa.Column('attributeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('attributeName', sa.VARCHAR(length=100)),
                                 sa.Column('description', sa.VARCHAR(length=1000)),
                                 sa.Column('iconID', sa.INTEGER()),
                                 sa.Column('defaultValue', sa.FLOAT()),
                                 sa.Column('published', sa.Boolean(name='dat_pub')),
                                 sa.Column('displayName', sa.VARCHAR(length=150)),
                                 sa.Column('unitID', sa.INTEGER()),
                                 sa.Column('stackable', sa.Boolean(name='dat_stack')),
                                 sa.Column('highIsGood', sa.Boolean(name='dat_hig')),
                                 sa.Column('categoryID', sa.INTEGER()),
                                 schema=schema
                                 )

    dgmEffects = sa.Table('dgmEffects', metadata,
                          sa.Column('effectID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                          sa.Column('effectName', sa.VARCHAR(length=400)),
                          sa.Column('effectCategory', sa.INTEGER()),
                          sa.Column('preExpression', sa.INTEGER()),
                          sa.Column('postExpression', sa.INTEGER()),
                          sa.Column('description', sa.VARCHAR(length=1000)),
                          sa.Column('guid', sa.VARCHAR(length=60)),
                          sa.Column('iconID', sa.INTEGER()),
                          sa.Column('isOffensive', sa.Boolean(name='de_offense')),
                          sa.Column('isAssistance', sa.Boolean(name='de_assist')),
                          sa.Column('durationAttributeID', sa.INTEGER()),
                          sa.Column('trackingSpeedAttributeID', sa.INTEGER()),
                          sa.Column('dischargeAttributeID', sa.INTEGER()),
                          sa.Column('rangeAttributeID', sa.INTEGER()),
                          sa.Column('falloffAttributeID', sa.INTEGER()),
                          sa.Column('disallowAutoRepeat', sa.Boolean(name='de_disallowar')),
                          sa.Column('published', sa.Boolean(name='de_published')),
                          sa.Column('displayName', sa.VARCHAR(length=100)),
                          sa.Column('isWarpSafe', sa.Boolean(name='de_warpsafe')),
                          sa.Column('rangeChance', sa.Boolean(name='de_rangechance')),
                          sa.Column('electronicChance', sa.Boolean(name='de_elecchance')),
                          sa.Column('propulsionChance', sa.Boolean(name='de_propchance')),
                          sa.Column('distribution', sa.INTEGER()),
                          sa.Column('sfxName', sa.VARCHAR(length=20)),
                          sa.Column('npcUsageChanceAttributeID', sa.INTEGER()),
                          sa.Column('npcActivationChanceAttributeID', sa.INTEGER()),
                          sa.Column('fittingUsageChanceAttributeID', sa.INTEGER()),
                          sa.Column('modifierInfo', sa.UnicodeText()),
                          schema=schema
                          )

    dgmExpressions = sa.Table('dgmExpressions', metadata,
                              sa.Column('expressionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('operandID', sa.INTEGER()),
                              sa.Column('arg1', sa.INTEGER()),
                              sa.Column('arg2', sa.INTEGER()),
                              sa.Column('expressionValue', sa.VARCHAR(length=100)),
                              sa.Column('description', sa.VARCHAR(length=1000)),
                              sa.Column('expressionName', sa.VARCHAR(length=500)),
                              sa.Column('expressionTypeID', sa.INTEGER()),
                              sa.Column('expressionGroupID', sa.INTEGER()),
                              sa.Column('expressionAttributeID', sa.INTEGER()),
                              schema=schema
                              )

    dgmTypeAttributes = sa.Table('dgmTypeAttributes', metadata,
                                 sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('attributeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False, index=True),
                                 sa.Column('valueInt', sa.INTEGER()),
                                 sa.Column('valueFloat', sa.FLOAT()),
                                 schema=schema
                                 )

    dgmTypeEffects = sa.Table('dgmTypeEffects', metadata,
                              sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('effectID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('isDefault', sa.Boolean(name='dte_default')),
                              schema=schema
                              )

    eveGraphics = sa.Table('eveGraphics', metadata,
                           sa.Column('graphicID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                           sa.Column('sofFactionName', sa.VARCHAR(length=100)),
                           sa.Column('graphicFile', sa.VARCHAR(length=100)),
                           sa.Column('sofHullName', sa.VARCHAR(length=100)),
                           sa.Column('sofRaceName', sa.VARCHAR(length=100)),
                           sa.Column('description', sa.UnicodeText()),
                           schema=schema
                           )

    eveIcons = sa.Table('eveIcons', metadata,
                        sa.Column('iconID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('iconFile', sa.VARCHAR(length=500)),
                        sa.Column('description', sa.UnicodeText()),
                        schema=schema
                        )

    eveUnits = sa.Table('eveUnits', metadata,
                        sa.Column('unitID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('unitName', sa.VARCHAR(length=100)),
                        sa.Column('displayName', sa.VARCHAR(length=50)),
                        sa.Column('description', sa.VARCHAR(length=1000)),
                        schema=schema
                        )

    industryActivity = sa.Table('industryActivity', metadata,
                                sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('activityID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False, index=True),
                                sa.Column('time', sa.INTEGER()),
                                schema=schema
                                )

    industryActivityMaterials = sa.Table('industryActivityMaterials', metadata,
                                         sa.Column('typeID', sa.INTEGER(), index=True),
                                         sa.Column('activityID', sa.INTEGER()),
                                         sa.Column('materialTypeID', sa.INTEGER()),
                                         sa.Column('quantity', sa.INTEGER()),
                                         schema=schema
                                         )
    sa.Index('industryActivityMaterials_idx1', industryActivityMaterials.c.typeID, industryActivityMaterials.c.activityID)

    industryActivityProbabilities = sa.Table('industryActivityProbabilities', metadata,
                                             sa.Column('typeID', sa.INTEGER(), index=True),
                                             sa.Column('activityID', sa.INTEGER()),
                                             sa.Column('productTypeID', sa.INTEGER(), index=True),
                                             sa.Column('probability', sa.DECIMAL(precision=3, scale=2)),
                                             schema=schema
                                             )

    industryActivityProducts = sa.Table('industryActivityProducts', metadata,
                                        sa.Column('typeID', sa.INTEGER(), index=True),
                                        sa.Column('activityID', sa.INTEGER()),
                                        sa.Column('productTypeID', sa.INTEGER(), index=True),
                                        sa.Column('quantity', sa.INTEGER()),
                                        schema=schema
                                        )

    industryActivityRaces = sa.Table('industryActivityRaces', metadata,
                                     sa.Column('typeID', sa.INTEGER(), index=True),
                                     sa.Column('activityID', sa.INTEGER()),
                                     sa.Column('productTypeID', sa.INTEGER(), index=True),
                                     sa.Column('raceID', sa.INTEGER()),
                                     schema=schema
                                     )

    industryActivitySkills = sa.Table('industryActivitySkills', metadata,
                                      sa.Column('typeID', sa.INTEGER(), index=True),
                                      sa.Column('activityID', sa.INTEGER()),
                                      sa.Column('skillID', sa.INTEGER(), index=True),
                                      sa.Column('level', sa.INTEGER()),
                                      schema=schema
                                      )
    sa.Index('industryActivitySkills_idx1', industryActivitySkills.c.typeID, industryActivitySkills.c.activityID)

    industryBlueprints = sa.Table('industryBlueprints', metadata,
                                  sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                  sa.Column('maxProductionLimit', sa.INTEGER()),
                                  schema=schema
                                  )

    invCategories = sa.Table('invCategories', metadata,
                             sa.Column('categoryID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('categoryName', sa.VARCHAR(length=100)),
                             sa.Column('iconID', sa.INTEGER()),
                             sa.Column('published', sa.Boolean(name='invcat_published')),
                             schema=schema
                             )

    invContrabandTypes = sa.Table('invContrabandTypes', metadata,
                                  sa.Column('factionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                  sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False, index=True),
                                  sa.Column('standingLoss', sa.FLOAT(precision=53)),
                                  sa.Column('confiscateMinSec', sa.FLOAT(precision=53)),
                                  sa.Column('fineByValue', sa.FLOAT(precision=53)),
                                  sa.Column('attackMinSec', sa.FLOAT(precision=53)),
                                  schema=schema
                                  )

    invControlTowerResourcePurposes = sa.Table('invControlTowerResourcePurposes', metadata,
                                               sa.Column('purpose', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                               sa.Column('purposeText', sa.VARCHAR(length=100)),
                                               schema=schema
                                               )

    invControlTowerResources = sa.Table('invControlTowerResources', metadata,
                                        sa.Column('controlTowerTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                        sa.Column('resourceTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                        sa.Column('purpose', sa.INTEGER()),
                                        sa.Column('quantity', sa.INTEGER()),
                                        sa.Column('minSecurityLevel', sa.FLOAT(precision=53)),
                                        sa.Column('factionID', sa.INTEGER()),
                                        schema=schema
                                        )

    invFlags = sa.Table('invFlags', metadata,
                        sa.Column('flagID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('flagName', sa.VARCHAR(length=200)),
                        sa.Column('flagText', sa.VARCHAR(length=100)),
                        sa.Column('orderID', sa.INTEGER()),
                        schema=schema
                        )

    invGroups = sa.Table('invGroups', metadata,
                         sa.Column('groupID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                         sa.Column('categoryID', sa.INTEGER(), index=True),
                         sa.Column('groupName', sa.VARCHAR(length=100)),
                         sa.Column('iconID', sa.INTEGER()),
                         sa.Column('useBasePrice', sa.Boolean(name='invgroup_usebaseprice')),
                         sa.Column('anchored', sa.Boolean(name='invgroup_anchored')),
                         sa.Column('anchorable', sa.Boolean(name='invgroup_anchorable')),
                         sa.Column('fittableNonSingleton', sa.Boolean(name='invgroup_fitnonsingle')),
                         sa.Column('published', sa.Boolean(name='invgroup_published')),
                         schema=schema
                         )

    invItems = sa.Table('invItems', metadata,
                        sa.Column('itemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('typeID', sa.INTEGER(), nullable=False),
                        sa.Column('ownerID', sa.INTEGER(), nullable=False),
                        sa.Column('locationID', sa.INTEGER(), nullable=False, index=True),
                        sa.Column('flagID', sa.INTEGER(), nullable=False),
                        sa.Column('quantity', sa.INTEGER(), nullable=False),
                        schema=schema
                        )
    sa.Index('items_IX_OwnerLocation', invItems.c.ownerID, invItems.c.locationID)

    invMarketGroups = sa.Table('invMarketGroups', metadata,
                               sa.Column('marketGroupID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('parentGroupID', sa.INTEGER()),
                               sa.Column('marketGroupName', sa.VARCHAR(length=100)),
                               sa.Column('description', sa.VARCHAR(length=3000)),
                               sa.Column('iconID', sa.INTEGER()),
                               sa.Column('hasTypes', sa.Boolean(name='invmarketgroups_hastypes')),
                               schema=schema
                               )

    invMetaGroups = sa.Table('invMetaGroups', metadata,
                             sa.Column('metaGroupID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('metaGroupName', sa.VARCHAR(length=100)),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             sa.Column('iconID', sa.INTEGER()),
                             schema=schema
                             )

    invMetaTypes = sa.Table('invMetaTypes', metadata,
                            sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                            sa.Column('parentTypeID', sa.INTEGER()),
                            sa.Column('metaGroupID', sa.INTEGER()),
                            schema=schema
                            )

    invNames = sa.Table('invNames', metadata,
                        sa.Column('itemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('itemName', sa.VARCHAR(length=200), nullable=False),
                        schema=schema
                        )

    invPositions = sa.Table('invPositions', metadata,
                            sa.Column('itemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                            sa.Column('x', sa.FLOAT(), nullable=False, default=sa.text(u"'0'")),
                            sa.Column('y', sa.FLOAT(), nullable=False, default=sa.text(u"'0'")),
                            sa.Column('z', sa.FLOAT(), nullable=False, default=sa.text(u"'0'")),
                            sa.Column('yaw', sa.FLOAT(precision=24)),
                            sa.Column('pitch', sa.FLOAT(precision=24)),
                            sa.Column('roll', sa.FLOAT(precision=24)),
                            schema=schema
                            )

    invTraits = sa.Table('invTraits', metadata,
                         sa.Column('traitID', sa.INTEGER(), primary_key=True, autoincrement=True, nullable=False),
                         sa.Column('typeID', sa.INTEGER()),
                         sa.Column('skillID', sa.INTEGER()),
                         sa.Column('bonus', sa.FLOAT()),
                         sa.Column('bonusText', sa.UnicodeText()),
                         sa.Column('unitID', sa.INTEGER()),
                         schema=schema
                         )

    invTypeMaterials = sa.Table('invTypeMaterials', metadata,
                                sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('materialTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('quantity', sa.INTEGER(), nullable=False, default=sa.text(u"'0'")),
                                schema=schema
                                )

    invTypeReactions = sa.Table('invTypeReactions', metadata,
                                sa.Column('reactionTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('input', sa.Boolean(name='invtypereactions_input'),
                                          primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('quantity', sa.INTEGER()),
                                schema=schema
                                )

    invTypes = sa.Table('invTypes', metadata,
                        sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('groupID', sa.INTEGER(), index=True),
                        sa.Column('typeName', sa.VARCHAR(length=100)),
                        sa.Column('description', sa.UnicodeText()),
                        sa.Column('mass', sa.FLOAT(precision=53)),
                        sa.Column('volume', sa.FLOAT(precision=53)),
                        sa.Column('packagedVolume', sa.FLOAT(precision=53)),
                        sa.Column('capacity', sa.FLOAT(precision=53)),
                        sa.Column('portionSize', sa.INTEGER()),
                        sa.Column('raceID', sa.INTEGER()),
                        sa.Column('basePrice', sa.DECIMAL(precision=19, scale=4)),
                        sa.Column('published', sa.Boolean(name='invtype_published')),
                        sa.Column('marketGroupID', sa.INTEGER()),
                        sa.Column('iconID', sa.INTEGER()),
                        sa.Column('soundID', sa.INTEGER()),
                        sa.Column('graphicID', sa.INTEGER()),
                        schema=schema
                        )

    invUniqueNames = sa.Table('invUniqueNames', metadata,
                              sa.Column('itemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('itemName', sa.VARCHAR(length=200), nullable=False, index=True, unique=True),
                              sa.Column('groupID', sa.INTEGER()),
                              schema=schema
                              )
    sa.Index('invUniqueNames_IX_GroupName', invUniqueNames.c.groupID, invUniqueNames.c.itemName)

    invVolumes = sa.Table('invVolumes', metadata,
                          sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                          sa.Column('volume', sa.INTEGER()),
                          schema=schema
                          )

    mapCelestialStatistics = sa.Table('mapCelestialStatistics', metadata,
                                      sa.Column('celestialID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                      sa.Column('temperature', sa.FLOAT(precision=53)),
                                      sa.Column('spectralClass', sa.VARCHAR(length=10)),
                                      sa.Column('luminosity', sa.FLOAT(precision=53)),
                                      sa.Column('age', sa.FLOAT(precision=53)),
                                      sa.Column('life', sa.FLOAT(precision=53)),
                                      sa.Column('orbitRadius', sa.FLOAT(precision=53)),
                                      sa.Column('eccentricity', sa.FLOAT(precision=53)),
                                      sa.Column('massDust', sa.FLOAT(precision=53)),
                                      sa.Column('massGas', sa.FLOAT(precision=53)),
                                      sa.Column('fragmented', sa.Boolean(name='mapcelestialstats_frag')),
                                      sa.Column('density', sa.FLOAT(precision=53)),
                                      sa.Column('surfaceGravity', sa.FLOAT(precision=53)),
                                      sa.Column('escapeVelocity', sa.FLOAT(precision=53)),
                                      sa.Column('orbitPeriod', sa.FLOAT(precision=53)),
                                      sa.Column('rotationRate', sa.FLOAT(precision=53)),
                                      sa.Column('locked', sa.Boolean(name='mapcelestialstats_locked')),
                                      sa.Column('pressure', sa.FLOAT(precision=53)),
                                      sa.Column('radius', sa.FLOAT(precision=53)),
                                      sa.Column('mass', sa.INTEGER()),
                                      schema=schema
                                      )

    mapCelestialGraphics = sa.Table('mapCelestialGraphics', metadata,
                                    sa.Column('celestialID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                    sa.Column('heightMap1', sa.INTEGER()),
                                    sa.Column('heightMap2', sa.INTEGER()),
                                    sa.Column('shaderPreset', sa.INTEGER()),
                                    sa.Column('population', sa.Boolean()),
                                    schema=schema
                                    )

    mapConstellationJumps = sa.Table('mapConstellationJumps', metadata,
                                     sa.Column('fromRegionID', sa.INTEGER()),
                                     sa.Column('fromConstellationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                     sa.Column('toConstellationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                     sa.Column('toRegionID', sa.INTEGER()),
                                     schema=schema
                                     )

    mapConstellations = sa.Table('mapConstellations', metadata,
                                 sa.Column('regionID', sa.INTEGER()),
                                 sa.Column('constellationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('constellationName', sa.VARCHAR(length=100)),
                                 sa.Column('x', sa.FLOAT(precision=53)),
                                 sa.Column('y', sa.FLOAT(precision=53)),
                                 sa.Column('z', sa.FLOAT(precision=53)),
                                 sa.Column('xMin', sa.FLOAT(precision=53)),
                                 sa.Column('xMax', sa.FLOAT(precision=53)),
                                 sa.Column('yMin', sa.FLOAT(precision=53)),
                                 sa.Column('yMax', sa.FLOAT(precision=53)),
                                 sa.Column('zMin', sa.FLOAT(precision=53)),
                                 sa.Column('zMax', sa.FLOAT(precision=53)),
                                 sa.Column('factionID', sa.INTEGER()),
                                 sa.Column('radius', sa.FLOAT()),
                                 schema=schema
                                 )

    mapDenormalize = sa.Table('mapDenormalize', metadata,
                              sa.Column('itemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('typeID', sa.INTEGER(), index=True),
                              sa.Column('groupID', sa.INTEGER()),
                              sa.Column('solarSystemID', sa.INTEGER(), index=True),
                              sa.Column('constellationID', sa.INTEGER(), index=True),
                              sa.Column('regionID', sa.INTEGER(), index=True),
                              sa.Column('orbitID', sa.INTEGER(), index=True),
                              sa.Column('x', sa.FLOAT(precision=53)),
                              sa.Column('y', sa.FLOAT(precision=53)),
                              sa.Column('z', sa.FLOAT(precision=53)),
                              sa.Column('radius', sa.FLOAT(precision=53)),
                              sa.Column('itemName', sa.VARCHAR(length=100)),
                              sa.Column('security', sa.FLOAT(precision=53)),
                              sa.Column('celestialIndex', sa.INTEGER()),
                              sa.Column('orbitIndex', sa.INTEGER()),
                              schema=schema
                              )
    sa.Index('mapDenormalize_IX_groupRegion', mapDenormalize.c.groupID, mapDenormalize.c.regionID)
    sa.Index('mapDenormalize_IX_groupSystem', mapDenormalize.c.groupID, mapDenormalize.c.solarSystemID)
    sa.Index('mapDenormalize_IX_groupConstellation', mapDenormalize.c.groupID, mapDenormalize.c.constellationID)

    mapJumps = sa.Table('mapJumps', metadata,
                        sa.Column('stargateID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                        sa.Column('destinationID', sa.INTEGER()),
                        schema=schema
                        )

    mapLandmarks = sa.Table('mapLandmarks', metadata,
                            sa.Column('landmarkID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                            sa.Column('landmarkName', sa.VARCHAR(length=100)),
                            sa.Column('description', sa.UnicodeText()),
                            sa.Column('locationID', sa.INTEGER()),
                            sa.Column('x', sa.FLOAT(precision=53)),
                            sa.Column('y', sa.FLOAT(precision=53)),
                            sa.Column('z', sa.FLOAT(precision=53)),
                            sa.Column('iconID', sa.INTEGER()),
                            schema=schema
                            )

    mapLocationScenes = sa.Table('mapLocationScenes', metadata,
                                 sa.Column('locationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('graphicID', sa.INTEGER()),
                                 schema=schema
                                 )

    mapLocationWormholeClasses = sa.Table('mapLocationWormholeClasses', metadata,
                                          sa.Column('locationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                          sa.Column('wormholeClassID', sa.INTEGER()),
                                          schema=schema
                                          )

    mapRegionJumps = sa.Table('mapRegionJumps', metadata,
                              sa.Column('fromRegionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('toRegionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              schema=schema
                              )

    mapRegions = sa.Table('mapRegions', metadata,
                          sa.Column('regionID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                          sa.Column('regionName', sa.VARCHAR(length=100)),
                          sa.Column('x', sa.FLOAT(precision=53)),
                          sa.Column('y', sa.FLOAT(precision=53)),
                          sa.Column('z', sa.FLOAT(precision=53)),
                          sa.Column('xMin', sa.FLOAT(precision=53)),
                          sa.Column('xMax', sa.FLOAT(precision=53)),
                          sa.Column('yMin', sa.FLOAT(precision=53)),
                          sa.Column('yMax', sa.FLOAT(precision=53)),
                          sa.Column('zMin', sa.FLOAT(precision=53)),
                          sa.Column('zMax', sa.FLOAT(precision=53)),
                          sa.Column('factionID', sa.INTEGER()),
                          sa.Column('nebula', sa.INTEGER()),
                          sa.Column('radius', sa.FLOAT()),
                          schema=schema
                          )

    mapSolarSystemJumps = sa.Table('mapSolarSystemJumps', metadata,
                                   sa.Column('fromRegionID', sa.INTEGER()),
                                   sa.Column('fromConstellationID', sa.INTEGER()),
                                   sa.Column('fromSolarSystemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                   sa.Column('toSolarSystemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                   sa.Column('toConstellationID', sa.INTEGER()),
                                   sa.Column('toRegionID', sa.INTEGER()),
                                   schema=schema
                                   )

    mapSolarSystems = sa.Table('mapSolarSystems', metadata,
                               sa.Column('regionID', sa.INTEGER(), index=True),
                               sa.Column('constellationID', sa.INTEGER(), index=True),
                               sa.Column('solarSystemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('solarSystemName', sa.VARCHAR(length=100)),
                               sa.Column('x', sa.FLOAT(precision=53)),
                               sa.Column('y', sa.FLOAT(precision=53)),
                               sa.Column('z', sa.FLOAT(precision=53)),
                               sa.Column('xMin', sa.FLOAT(precision=53)),
                               sa.Column('xMax', sa.FLOAT(precision=53)),
                               sa.Column('yMin', sa.FLOAT(precision=53)),
                               sa.Column('yMax', sa.FLOAT(precision=53)),
                               sa.Column('zMin', sa.FLOAT(precision=53)),
                               sa.Column('zMax', sa.FLOAT(precision=53)),
                               sa.Column('luminosity', sa.FLOAT(precision=53)),
                               sa.Column('border', sa.Boolean(name='mapss_border')),
                               sa.Column('fringe', sa.Boolean(name='mapss_fringe')),
                               sa.Column('corridor', sa.Boolean(name='mapss_corridor')),
                               sa.Column('hub', sa.Boolean(name='mapss_hub')),
                               sa.Column('international', sa.Boolean(name='mapss_internat')),
                               sa.Column('regional', sa.Boolean(name='mapss_regional')),
                               sa.Column('constellation', sa.Boolean(name='mapss_constel')),
                               sa.Column('security', sa.FLOAT(precision=53), index=True),
                               sa.Column('factionID', sa.INTEGER()),
                               sa.Column('radius', sa.FLOAT(precision=53)),
                               sa.Column('sunTypeID', sa.INTEGER()),
                               sa.Column('securityClass', sa.VARCHAR(length=2)),
                               schema=schema
                               )

    mapUniverse = sa.Table('mapUniverse', metadata,
                           sa.Column('universeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                           sa.Column('universeName', sa.VARCHAR(length=100)),
                           sa.Column('x', sa.FLOAT(precision=53)),
                           sa.Column('y', sa.FLOAT(precision=53)),
                           sa.Column('z', sa.FLOAT(precision=53)),
                           sa.Column('xMin', sa.FLOAT(precision=53)),
                           sa.Column('xMax', sa.FLOAT(precision=53)),
                           sa.Column('yMin', sa.FLOAT(precision=53)),
                           sa.Column('yMax', sa.FLOAT(precision=53)),
                           sa.Column('zMin', sa.FLOAT(precision=53)),
                           sa.Column('zMax', sa.FLOAT(precision=53)),
                           sa.Column('radius', sa.FLOAT(precision=53)),
                           schema=schema
                           )

    planetSchematics = sa.Table('planetSchematics', metadata,
                                sa.Column('schematicID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                sa.Column('schematicName', sa.VARCHAR(length=255)),
                                sa.Column('cycleTime', sa.INTEGER()),
                                schema=schema
                                )

    planetSchematicsPinMap = sa.Table('planetSchematicsPinMap', metadata,
                                      sa.Column('schematicID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                      sa.Column('pinTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                      schema=schema
                                      )

    planetSchematicsTypeMap = sa.Table('planetSchematicsTypeMap', metadata,
                                       sa.Column('schematicID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       sa.Column('typeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       sa.Column('quantity', sa.INTEGER()),
                                       sa.Column('isInput', sa.Boolean(name='pstm_input')),
                                       schema=schema
                                       )

    ramActivities = sa.Table('ramActivities', metadata,
                             sa.Column('activityID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('activityName', sa.VARCHAR(length=100)),
                             sa.Column('iconNo', sa.VARCHAR(length=5)),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             sa.Column('published', sa.Boolean(name='ra_pub')),
                             schema=schema
                             )

    ramAssemblyLineStations = sa.Table('ramAssemblyLineStations', metadata,
                                       sa.Column('stationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       sa.Column('assemblyLineTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       sa.Column('quantity', sa.INTEGER()),
                                       sa.Column('stationTypeID', sa.INTEGER()),
                                       sa.Column('ownerID', sa.INTEGER(), index=True),
                                       sa.Column('solarSystemID', sa.INTEGER(), index=True),
                                       sa.Column('regionID', sa.INTEGER(), index=True),
                                       schema=schema


                                       )

    ramAssemblyLineTypeDetailPerCategory = sa.Table('ramAssemblyLineTypeDetailPerCategory', metadata,
                                                    sa.Column('assemblyLineTypeID', sa.INTEGER(), primary_key=True,
                                                              autoincrement=False, nullable=False),
                                                    sa.Column('categoryID', sa.INTEGER(), primary_key=True,
                                                              autoincrement=False, nullable=False),
                                                    sa.Column('timeMultiplier', sa.FLOAT(precision=53)),
                                                    sa.Column('materialMultiplier', sa.FLOAT(precision=53)),
                                                    sa.Column('costMultiplier', sa.FLOAT(precision=53)),
                                                    schema=schema
                                                    )

    ramAssemblyLineTypeDetailPerGroup = sa.Table('ramAssemblyLineTypeDetailPerGroup', metadata,
                                                 sa.Column('assemblyLineTypeID', sa.INTEGER(), primary_key=True,
                                                           autoincrement=False, nullable=False),
                                                 sa.Column('groupID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                                 sa.Column('timeMultiplier', sa.FLOAT(precision=53)),
                                                 sa.Column('materialMultiplier', sa.FLOAT(precision=53)),
                                                 sa.Column('costMultiplier', sa.FLOAT(precision=53)),
                                                 schema=schema
                                                 )

    ramAssemblyLineTypes = sa.Table('ramAssemblyLineTypes', metadata,
                                    sa.Column('assemblyLineTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                    sa.Column('assemblyLineTypeName', sa.VARCHAR(length=100)),
                                    sa.Column('description', sa.VARCHAR(length=1000)),
                                    sa.Column('baseTimeMultiplier', sa.FLOAT(precision=53)),
                                    sa.Column('baseMaterialMultiplier', sa.FLOAT(precision=53)),
                                    sa.Column('baseCostMultiplier', sa.FLOAT(precision=53)),
                                    sa.Column('volume', sa.FLOAT(precision=53)),
                                    sa.Column('activityID', sa.INTEGER()),
                                    sa.Column('minCostPerHour', sa.FLOAT(precision=53)),
                                    schema=schema


                                    )

    ramInstallationTypeContents = sa.Table('ramInstallationTypeContents', metadata,
                                           sa.Column('installationTypeID', sa.INTEGER(), primary_key=True,
                                                     autoincrement=False, nullable=False),
                                           sa.Column('assemblyLineTypeID', sa.INTEGER(), primary_key=True,
                                                     autoincrement=False, nullable=False),
                                           sa.Column('quantity', sa.INTEGER()),
                                           schema=schema


                                           )

    skinLicense = sa.Table('skinLicense', metadata,
                           sa.Column('licenseTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                           sa.Column('duration', sa.INTEGER()),
                           sa.Column('skinID', sa.INTEGER()),
                           schema=schema


                           )

    skinMaterials = sa.Table('skinMaterials', metadata,
                             sa.Column('skinMaterialID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('displayNameID', sa.INTEGER()),
                             sa.Column('materialSetID', sa.INTEGER()),
                             schema=schema


                             )

    skinShip = sa.Table('skinShip', metadata,
                        sa.Column('skinID', sa.INTEGER(), index=True),
                        sa.Column('typeID', sa.INTEGER(), index=True),
                        schema=schema


                        )

    skins = sa.Table('skins', metadata,
                     sa.Column('skinID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                     sa.Column('internalName', sa.VARCHAR(length=70)),
                     sa.Column('skinMaterialID', sa.INTEGER()),
                     schema=schema


                     )

    staOperationServices = sa.Table('staOperationServices', metadata,
                                    sa.Column('operationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                    sa.Column('serviceID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                    schema=schema


                                    )

    staOperations = sa.Table('staOperations', metadata,
                             sa.Column('activityID', sa.INTEGER()),
                             sa.Column('operationID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                             sa.Column('operationName', sa.VARCHAR(length=100)),
                             sa.Column('description', sa.VARCHAR(length=1000)),
                             sa.Column('fringe', sa.INTEGER()),
                             sa.Column('corridor', sa.INTEGER()),
                             sa.Column('hub', sa.INTEGER()),
                             sa.Column('border', sa.INTEGER()),
                             sa.Column('ratio', sa.INTEGER()),
                             sa.Column('caldariStationTypeID', sa.INTEGER()),
                             sa.Column('minmatarStationTypeID', sa.INTEGER()),
                             sa.Column('amarrStationTypeID', sa.INTEGER()),
                             sa.Column('gallenteStationTypeID', sa.INTEGER()),
                             sa.Column('joveStationTypeID', sa.INTEGER()),
                             schema=schema


                             )

    staServices = sa.Table('staServices', metadata,
                           sa.Column('serviceID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                           sa.Column('serviceName', sa.VARCHAR(length=100)),
                           sa.Column('description', sa.VARCHAR(length=1000)),
                           schema=schema


                           )

    staStationTypes = sa.Table('staStationTypes', metadata,
                               sa.Column('stationTypeID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('dockEntryX', sa.FLOAT(precision=53)),
                               sa.Column('dockEntryY', sa.FLOAT(precision=53)),
                               sa.Column('dockEntryZ', sa.FLOAT(precision=53)),
                               sa.Column('dockOrientationX', sa.FLOAT(precision=53)),
                               sa.Column('dockOrientationY', sa.FLOAT(precision=53)),
                               sa.Column('dockOrientationZ', sa.FLOAT(precision=53)),
                               sa.Column('operationID', sa.INTEGER()),
                               sa.Column('officeSlots', sa.INTEGER()),
                               sa.Column('reprocessingEfficiency', sa.FLOAT(precision=53)),
                               sa.Column('conquerable', sa.Boolean(name='stastat_conq')),
                               schema=schema
                               )

    staStations = sa.Table('staStations', metadata,
                           sa.Column('stationID', sa.BigInteger, primary_key=True, autoincrement=False, nullable=False),
                           sa.Column('security', sa.FLOAT(precision=53)),
                           sa.Column('dockingCostPerVolume', sa.FLOAT(precision=53)),
                           sa.Column('maxShipVolumeDockable', sa.FLOAT(precision=53)),
                           sa.Column('officeRentalCost', sa.INTEGER()),
                           sa.Column('operationID', sa.INTEGER(), index=True),
                           sa.Column('stationTypeID', sa.INTEGER(), index=True),
                           sa.Column('corporationID', sa.INTEGER(), index=True),
                           sa.Column('solarSystemID', sa.INTEGER(), index=True),
                           sa.Column('constellationID', sa.INTEGER(), index=True),
                           sa.Column('regionID', sa.INTEGER(), index=True),
                           sa.Column('stationName', sa.VARCHAR(length=100)),
                           sa.Column('x', sa.FLOAT(precision=53)),
                           sa.Column('y', sa.FLOAT(precision=53)),
                           sa.Column('z', sa.FLOAT(precision=53)),
                           sa.Column('reprocessingEfficiency', sa.FLOAT(precision=53)),
                           sa.Column('reprocessingStationsTake', sa.FLOAT(precision=53)),
                           sa.Column('reprocessingHangarFlag', sa.INTEGER()),
                           schema=schema
                           )

    translationTables = sa.Table('translationTables', metadata,
                                 sa.Column('sourceTable', sa.VARCHAR(length=200), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('destinationTable', sa.VARCHAR(length=200)),
                                 sa.Column('translatedKey', sa.VARCHAR(length=200), primary_key=True, autoincrement=False, nullable=False),
                                 sa.Column('tcGroupID', sa.INTEGER()),
                                 sa.Column('tcID', sa.INTEGER()),
                                 schema=schema
                                 )

    trnTranslationColumns = sa.Table('trnTranslationColumns', metadata,
                                     sa.Column('tcGroupID', sa.INTEGER()),
                                     sa.Column('tcID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                     sa.Column('tableName', sa.VARCHAR(length=256), nullable=False),
                                     sa.Column('columnName', sa.VARCHAR(length=128), nullable=False),
                                     sa.Column('masterID', sa.VARCHAR(length=128)),
                                     schema=schema
                                     )

    trnTranslationLanguages = sa.Table('trnTranslationLanguages', metadata,
                                       sa.Column('numericLanguageID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                       sa.Column('languageID', sa.VARCHAR(length=50)),
                                       sa.Column('languageName', sa.VARCHAR(length=200)),
                                       schema=schema
                                       )

    trnTranslations = sa.Table('trnTranslations', metadata,
                               sa.Column('tcID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('keyID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('languageID', sa.VARCHAR(length=50), primary_key=True, autoincrement=False, nullable=False),
                               sa.Column('text', sa.UnicodeText(), nullable=False),
                               schema=schema
                               )

    warCombatZoneSystems = sa.Table('warCombatZoneSystems', metadata,
                                    sa.Column('solarSystemID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                                    sa.Column('combatZoneID', sa.INTEGER()),
                                    schema=schema
                                    )

    warCombatZones = sa.Table('warCombatZones', metadata,
                              sa.Column('combatZoneID', sa.INTEGER(), primary_key=True, autoincrement=False, nullable=False),
                              sa.Column('combatZoneName', sa.VARCHAR(length=100)),
                              sa.Column('factionID', sa.INTEGER()),
                              sa.Column('centerSystemID', sa.INTEGER()),
                              sa.Column('description', sa.VARCHAR(length=500)),
                              schema=schema
                              )

    return metadata
